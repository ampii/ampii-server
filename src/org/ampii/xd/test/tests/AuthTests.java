// This file is part of the AMPII Project. It is subject to the copyright and license terms in the top-level LICENSE file.
package org.ampii.xd.test.tests;

import org.ampii.xd.common.Errors;
import org.ampii.xd.common.XDException;
import org.ampii.xd.security.AuthManager;
import org.ampii.xd.server.HTTP;
import org.ampii.xd.test.Test;
import org.ampii.xd.test.TestException;

/**
 * Tests for the /.auth data and its functionality.
 * <p>
 * Add this class to the config file indicated by Application.testDefinitionFile if you want these tests to run.
 *
 * @author daverobin
 */
public class AuthTests {

    public static Test[] tests = {
            new Test("TLS Activation Test") {
                public void execute() throws TestException {

                    // reset to factory default conditions
                    try { AuthManager.resetToFactoryDefaults(); } catch (XDException e) { fail("resetToFactoryDefaults() failed",e); }

                    // check factory default conditions
                    step("check initial dev-cert");
                    path("/.auth/dev-cert");
                    clientData("<OctetString/>");
                    get();
                    expectClientData("<OctetString value=''/>");

                    step("check initial ca-certs");
                    path("/.auth/ca-certs");
                    clientData("<List/>");
                    get();
                    expectSuccessCode();
                    expectClientData("<List/>");

                    // then write stuff
                    alt("plain");  // we do this all in plain text

                    step("write dev-cert-pend");
                    path("/.auth/dev-cert-pend");
                    clientData("<OctetString value
                    put();
                    expectSuccessCode();

                    step("write dev-key-pend");
                    path("/.auth/dev-key-pend");
                    clientData("<OctetString value='308204BF020100300D06092A864886F70D0101010500048204A9308204A50201000282010100A6B065DF05634806A71B3BB5915A9A3FFD060A1D38373314BF181002EDE0485ABA8FC26A71D51D3941464EC153D5F6AD0F2D177829D2A8AE33CA32744A803A54BD477E71175E789C2D84ACDA07ACF13D6AC08F41DE1D8239244FD885508E376DF10621D6DE8A986E87BE25C2B92515424F451DAB90306C59736EB68ADCB330F745B33DE9E6602E6E0D4E53EAA97D174EEB691E8956D0EB57657C6A77EBD2B6A0E7C54724780C56FBC5B958894242CB39A213D329725ACA514532808DA439A996561CE81427E02D239FE0C9C12F9CB0E4B116B8A9DC0A5D1B7171CBF86F30E6EB29235C246480910BDA29FA008F41D41EC2FCB1AD215DF2C7889BE84F2DFDEE9D0203010001028201002EBCF75379674522D868426DBEBBF0D45056092FF83B420F67259017C22B491E678137BA3100D898DD3CA18883C152D16397F924B0556906AF6EDA86D0FCF35E1F549497913DE403A69FB4F7CD7F288558117619B9F5FC359980E9ED379128E9A2D35D59AA3CA2511BAEAD57D42219BBE60E332B8FDA8406F0DEF2402D71F1207080427C4172F06C764704FF4EA0D23310AF0B8A42BFBAFE131A8E42D7C85812D21F084CEF013E68F93F93AD7B9138CC98FA28C89F1894A873F15A34060C7050239AA6A3D7A4A83A9FC23E1C979B71173CFEA5762369D8359C08A497AB3B3E1E4AA452F1AE2A3AB9D6378B749DE19D1C0943E46C43DC235D6BA9F4AD3FD1010102818100D41921A259484A323CF3C4865AF681A6EFA7D24ADE04564817BF8DA38586761D1EEE40D90D270B2F1E18EC413637D4A25E10E70449695708CC08FE8907C95481451A6FD100A9266EFEE9052A077E58CE3157C175C3E312CF7EE6DF3B3C36B81DDDD36BB225E63C771DBAD2902EA18B5AD40878DA0801C2A59146AB77A1F4F65502818100C931154E8485DDC724E544F77B371C02A9CF64A221BAAB9A6B5FE5007311F73F8BF66B6F8975533C5508E4E936BF015207D88C09691F17A833420D7A68F14D709FA05CDDDE8AF319B6BE832F8A4E2573CF20AC3E1CD5A8973A73BC07FBFDF40BEB183F7DEE6A818CCF5C84C69EF37ED9E961EBB2FF62FF4BC5F82C22B6858F29028181008CC791979D036A9C25F0F784E663B07309A7AEE19AB3EE4133E2253560AF7B3EA1052B6DE65900076A46C8AA103EC6986F2F70E75B82DC0E2EBFD99342E3D37F6A4ABDE55036F617BE8314B66CFAE41F18895313C3CDB8F2991CCD17184489B8E94027BFBB8032AA2DC58F75BC3DE5AD8807878FD0B8BA66032391347AFF897102818100959C816AAD13DB333F159B2EAA1AF62268E287C4256EEA335FCBA4C0ABD15D5A8D1B47135F55B6FAF38534ACD4803F5C1FE78163721FA3F8F97D1206C84940BC12882EE6F299C36388C8AD474A0308C8D0EB4C0AB8688E013F7F57015CFBA162C78575999114F497A08FFD50B25D0224CBEF7C55D4A26A948F7818620BF6CFD902818100ABBFBE8C427920BA891A6EEAA4917D4AE508DD0680B7F5618669E4775A679233F179B4F5E0F43F4D814C14C7D0CBD803EF44BA62754A190E636D6975E79400083155BBF1FB86EE5CCD42660B16DB4A41F13A3C81543993F185350783272F9A3B64C8DBD5A5014C835D8F38CE347D430EE13238230F4B3264E7CF8D8821213E10'/>");
                    put();
                    expectSuccessCode();

                    step("write ca-certs-pend");
                    path("/.auth/ca-certs-pend");
                    clientData("<OctetString name='1' value
                    post();
                    expectSuccessCode();

                    // activate!
                    step("write tls-activate");
                    clientData("<Boolean value='true'/>");
                    path("/.auth/tls-activate");
                    put();
                    expectSuccessCode();

                    // check results of activation
                    alt("default");  // switch back to xml or json for this
                    step("check activated dev-cert");
                    clientData("<OctetString/>");
                    path("/.auth/dev-cert");
                    get();
                    expectClientData("<OctetString value

                    step("check activated ca-certs");
                    clientData("<List type='0-BACnetWsAuth/ca-certs'/>");
                    path("/.auth/ca-certs");
                    get();
                    expectClientData(
                            "<List type='0-BACnetWsAuth/ca-certs'>" +
                                    "    <OctetString name='1' value
                                    "</List>");


                }
            },
            new Test("Internal Auth Server Test"){
                public void execute() throws TestException {

                    step("attempt read user/pass/id/secret");
                    path("/.auth/int/user");
                    get();
                    expectStatusCode(Errors.statusCodeForErrorNumber(Errors.NOT_READABLE));
                    expectErrorNumber(Errors.NOT_READABLE);
                    path("/.auth/int/pass");
                    get();
                    expectStatusCode(Errors.statusCodeForErrorNumber(Errors.NOT_READABLE));
                    expectErrorNumber(Errors.NOT_READABLE);
                    path("/.auth/int/id");
                    get();
                    expectStatusCode(Errors.statusCodeForErrorNumber(Errors.NOT_READABLE));
                    expectErrorNumber(Errors.NOT_READABLE);
                    path("/.auth/int/secret");
                    get();
                    expectStatusCode(Errors.statusCodeForErrorNumber(Errors.NOT_READABLE));
                    expectErrorNumber(Errors.NOT_READABLE);

                    step("attempt write user/pass/id/secret without authorization");
                    clientData("<String name='data' value='joe'/>");
                    path("/.auth/int/user");
                    put();
                    expectStatusCode(Errors.statusCodeForErrorNumber(Errors.NOT_AUTHORIZED));
                    expectErrorNumber(Errors.NOT_AUTHORIZED);
                    clientData("<String name='data' value='letmein'/>");
                    path("/.auth/int/user");
                    put();
                    expectStatusCode(Errors.statusCodeForErrorNumber(Errors.NOT_AUTHORIZED));
                    expectErrorNumber(Errors.NOT_AUTHORIZED);
                    clientData("<String name='data' value='CLIENT1234'/>");
                    path("/.auth/int/id");
                    put();
                    expectStatusCode(Errors.statusCodeForErrorNumber(Errors.NOT_AUTHORIZED));
                    expectErrorNumber(Errors.NOT_AUTHORIZED);
                    clientData("<String name='data' value='super-secret'/>");
                    path("/.auth/int/secret");
                    put();
                    expectStatusCode(Errors.statusCodeForErrorNumber(Errors.NOT_AUTHORIZED));
                    expectErrorNumber(Errors.NOT_AUTHORIZED);

                    step("get token for scope 'auth' using default username and password");
                    path("/.auth/int/token");
                    scheme("https"); // very important :-);
                    requestHeader("Content-Type", "application/x-www-form-urlencoded");
                    requestText(HTTP.x_www_url_form_encoded(
                            "scope", "auth",
                            "grant_type", "password",
                            "username", ".",
                            "password", "."));
                    post();
                    alt("json"); // response is in JSON
                    expectResponseDataItemValue("token_type", "Bearer");
                    expectResponseDataItemPresent("expires_in");
                    expectResponseDataItemPresent("access_token");
                    //
                    String token = getResponseData().stringValueOf("access_token", null);
                    if (token==null || token.isEmpty()) fail("access token is missing or empty");
                    //
                    step("use token to write new values to user/pass/id/secret");
                    requestHeader("Authorization", "Bearer " + token);
                    clientData("<String name='user' value='joe'/>");
                    path("/.auth/int/user");
                    put();
                    expectSuccessCode();
                    clientData("<String name='pass' value='letmein'/>");
                    path("/.auth/int/pass");
                    put();
                    expectSuccessCode();
                    clientData("<String name='id' value='CLIENT1234'/>");
                    path("/.auth/int/id");
                    put();
                    expectSuccessCode();
                    clientData("<String name='secret' value='super-secret'/>");
                    path("/.auth/int/secret");
                    put();
                    expectSuccessCode();

                    step("get a token using the new user/pass and grant_type='password'");
                    requestHeader("Authorization", null); // remove authorization header for password grant typwe
                    path("/.auth/int/token");
                    scheme("https"); // very important :-);
                    requestHeader("Content-Type", "application/x-www-form-urlencoded");
                    requestText(HTTP.x_www_url_form_encoded(
                            "scope", "auth",
                            "grant_type", "password",
                            "username", "joe",
                            "password", "letmein"));
                    post();
                    alt("json"); // response is in JSON
                    expectResponseDataItemValue("token_type", "Bearer");
                    expectResponseDataItemPresent("expires_in");
                    expectResponseDataItemPresent("access_token");

                    step("get a token using the new id/secret and grant_type='client_credentials' (and HTTP Basic auth);");
                    requestHeader("Authorization",HTTP.generateBasicAuthorization("CLIENT1234","super-secret")); // use Basic for client auth
                    path("/.auth/int/token");
                    scheme("https"); // very important :-);
                    requestHeader("Content-Type", "application/x-www-form-urlencoded");
                    requestText(HTTP.x_www_url_form_encoded(
                            "scope", "auth",
                            "grant_type", "client_credentials"));
                    post();
                    alt("json"); // response is in JSON
                    expectResponseDataItemValue("token_type", "Bearer");
                    expectResponseDataItemPresent("expires_in");
                    expectResponseDataItemPresent("access_token");

                }
            }
    };

}